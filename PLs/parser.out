Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> op
Rule 1     op -> calc
Rule 2     op -> op PLUS calc
Rule 3     op -> op MINUS calc
Rule 4     calc -> expr
Rule 5     calc -> calc TIMES expr
Rule 6     calc -> calc DIVIDE expr
Rule 7     expr -> NUMBER
Rule 8     expr -> LPAREN op RPAREN

Terminals, with rules where they appear

DIVIDE               : 6
LPAREN               : 8
MINUS                : 3
NUMBER               : 7
PLUS                 : 2
RPAREN               : 8
TIMES                : 5
error                : 

Nonterminals, with rules where they appear

calc                 : 1 2 3 5 6
expr                 : 4 5 6
op                   : 2 3 8 0

Parsing method: LALR

state 0

    (0) S' -> . op
    (1) op -> . calc
    (2) op -> . op PLUS calc
    (3) op -> . op MINUS calc
    (4) calc -> . expr
    (5) calc -> . calc TIMES expr
    (6) calc -> . calc DIVIDE expr
    (7) expr -> . NUMBER
    (8) expr -> . LPAREN op RPAREN

    NUMBER          shift and go to state 4
    LPAREN          shift and go to state 5

    op                             shift and go to state 1
    calc                           shift and go to state 2
    expr                           shift and go to state 3

state 1

    (0) S' -> op .
    (2) op -> op . PLUS calc
    (3) op -> op . MINUS calc

    PLUS            shift and go to state 6
    MINUS           shift and go to state 7


state 2

    (1) op -> calc .
    (5) calc -> calc . TIMES expr
    (6) calc -> calc . DIVIDE expr

    PLUS            reduce using rule 1 (op -> calc .)
    MINUS           reduce using rule 1 (op -> calc .)
    $end            reduce using rule 1 (op -> calc .)
    RPAREN          reduce using rule 1 (op -> calc .)
    TIMES           shift and go to state 8
    DIVIDE          shift and go to state 9


state 3

    (4) calc -> expr .

    TIMES           reduce using rule 4 (calc -> expr .)
    DIVIDE          reduce using rule 4 (calc -> expr .)
    PLUS            reduce using rule 4 (calc -> expr .)
    MINUS           reduce using rule 4 (calc -> expr .)
    $end            reduce using rule 4 (calc -> expr .)
    RPAREN          reduce using rule 4 (calc -> expr .)


state 4

    (7) expr -> NUMBER .

    TIMES           reduce using rule 7 (expr -> NUMBER .)
    DIVIDE          reduce using rule 7 (expr -> NUMBER .)
    PLUS            reduce using rule 7 (expr -> NUMBER .)
    MINUS           reduce using rule 7 (expr -> NUMBER .)
    $end            reduce using rule 7 (expr -> NUMBER .)
    RPAREN          reduce using rule 7 (expr -> NUMBER .)


state 5

    (8) expr -> LPAREN . op RPAREN
    (1) op -> . calc
    (2) op -> . op PLUS calc
    (3) op -> . op MINUS calc
    (4) calc -> . expr
    (5) calc -> . calc TIMES expr
    (6) calc -> . calc DIVIDE expr
    (7) expr -> . NUMBER
    (8) expr -> . LPAREN op RPAREN

    NUMBER          shift and go to state 4
    LPAREN          shift and go to state 5

    op                             shift and go to state 10
    calc                           shift and go to state 2
    expr                           shift and go to state 3

state 6

    (2) op -> op PLUS . calc
    (4) calc -> . expr
    (5) calc -> . calc TIMES expr
    (6) calc -> . calc DIVIDE expr
    (7) expr -> . NUMBER
    (8) expr -> . LPAREN op RPAREN

    NUMBER          shift and go to state 4
    LPAREN          shift and go to state 5

    calc                           shift and go to state 11
    expr                           shift and go to state 3

state 7

    (3) op -> op MINUS . calc
    (4) calc -> . expr
    (5) calc -> . calc TIMES expr
    (6) calc -> . calc DIVIDE expr
    (7) expr -> . NUMBER
    (8) expr -> . LPAREN op RPAREN

    NUMBER          shift and go to state 4
    LPAREN          shift and go to state 5

    calc                           shift and go to state 12
    expr                           shift and go to state 3

state 8

    (5) calc -> calc TIMES . expr
    (7) expr -> . NUMBER
    (8) expr -> . LPAREN op RPAREN

    NUMBER          shift and go to state 4
    LPAREN          shift and go to state 5

    expr                           shift and go to state 13

state 9

    (6) calc -> calc DIVIDE . expr
    (7) expr -> . NUMBER
    (8) expr -> . LPAREN op RPAREN

    NUMBER          shift and go to state 4
    LPAREN          shift and go to state 5

    expr                           shift and go to state 14

state 10

    (8) expr -> LPAREN op . RPAREN
    (2) op -> op . PLUS calc
    (3) op -> op . MINUS calc

    RPAREN          shift and go to state 15
    PLUS            shift and go to state 6
    MINUS           shift and go to state 7


state 11

    (2) op -> op PLUS calc .
    (5) calc -> calc . TIMES expr
    (6) calc -> calc . DIVIDE expr

    PLUS            reduce using rule 2 (op -> op PLUS calc .)
    MINUS           reduce using rule 2 (op -> op PLUS calc .)
    $end            reduce using rule 2 (op -> op PLUS calc .)
    RPAREN          reduce using rule 2 (op -> op PLUS calc .)
    TIMES           shift and go to state 8
    DIVIDE          shift and go to state 9


state 12

    (3) op -> op MINUS calc .
    (5) calc -> calc . TIMES expr
    (6) calc -> calc . DIVIDE expr

    PLUS            reduce using rule 3 (op -> op MINUS calc .)
    MINUS           reduce using rule 3 (op -> op MINUS calc .)
    $end            reduce using rule 3 (op -> op MINUS calc .)
    RPAREN          reduce using rule 3 (op -> op MINUS calc .)
    TIMES           shift and go to state 8
    DIVIDE          shift and go to state 9


state 13

    (5) calc -> calc TIMES expr .

    TIMES           reduce using rule 5 (calc -> calc TIMES expr .)
    DIVIDE          reduce using rule 5 (calc -> calc TIMES expr .)
    PLUS            reduce using rule 5 (calc -> calc TIMES expr .)
    MINUS           reduce using rule 5 (calc -> calc TIMES expr .)
    $end            reduce using rule 5 (calc -> calc TIMES expr .)
    RPAREN          reduce using rule 5 (calc -> calc TIMES expr .)


state 14

    (6) calc -> calc DIVIDE expr .

    TIMES           reduce using rule 6 (calc -> calc DIVIDE expr .)
    DIVIDE          reduce using rule 6 (calc -> calc DIVIDE expr .)
    PLUS            reduce using rule 6 (calc -> calc DIVIDE expr .)
    MINUS           reduce using rule 6 (calc -> calc DIVIDE expr .)
    $end            reduce using rule 6 (calc -> calc DIVIDE expr .)
    RPAREN          reduce using rule 6 (calc -> calc DIVIDE expr .)


state 15

    (8) expr -> LPAREN op RPAREN .

    TIMES           reduce using rule 8 (expr -> LPAREN op RPAREN .)
    DIVIDE          reduce using rule 8 (expr -> LPAREN op RPAREN .)
    PLUS            reduce using rule 8 (expr -> LPAREN op RPAREN .)
    MINUS           reduce using rule 8 (expr -> LPAREN op RPAREN .)
    $end            reduce using rule 8 (expr -> LPAREN op RPAREN .)
    RPAREN          reduce using rule 8 (expr -> LPAREN op RPAREN .)

